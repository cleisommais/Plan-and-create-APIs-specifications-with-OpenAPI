openapi: 3.0.1
info:
  title: User-Account
  description: User account specification to define the user account API
  contact:
    email: suport@estiatraining.com
  version: 1.0.0
servers:
  - url: https://localhost:8080/v1
    description: Production server
tags:
  - name: users
    description: User Account
paths:
  /users:
    get:
      summary: Retrieve all users
      tags:
        - users
      security:
        - BearerAuth
      operationId: getAllUsers
      responses:
        200:
          $ref: '#/components/responses/SuccessArray'
        401:
          $ref: '#/components/responses/Unauthorized'                         
        500:
          $ref: '#/components/responses/ServerError'  
  /user:                
    post:
      summary: Create a new user
      tags:
        - users      
      security:
        - BearerAuth
      operationId: createUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_request' 
        required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthorized'                         
        500:
          $ref: '#/components/responses/ServerError'       
  /user/{id}:                
    get:
      summary: Get a user by ID
      tags:
        - users      
      security:
        - BearerAuth
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_request' 
        required: true        
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthorized'    
        404:
          $ref: '#/components/responses/NotFound'                                  
        500:
          $ref: '#/components/responses/ServerError'                                                                    
    put:
      summary: Update a user by ID
      tags:
        - users      
      security:
        - BearerAuth
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_request' 
        required: true        
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthorized'    
        404:
          $ref: '#/components/responses/NotFound'                                  
        500:
          $ref: '#/components/responses/ServerError'       
    delete:
      summary: Delete a user by ID
      tags:
        - users      
      security:
        - BearerAuth
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_request' 
        required: true        
      responses:   
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthorized'    
        404:
          $ref: '#/components/responses/NotFound'                                  
        500:
          $ref: '#/components/responses/ServerError'          
components:
  schemas:
    body_request:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
          minimum: 10
          example: suport@estiatraining.com
        password:
          minimum: 1
          type: string
          format: password
          example: '123'
    user:
      required:
        - id
        - email        
      type: object
      properties:
        email:
          type: string
          format: email
          minimum: 10
          example: suport@estiatraining.com      
        id:
          type: integer
          format: int64
          example: 1  
    body_response_error:
      required:
        - code_error
        - message        
      type: object
      properties:
        code_error:
          type: integer
          format: int64
          minimum: 1
          example: 13216      
        message:
          type: string
          example: message_to_show    
  responses:          
    Success:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    SuccessArray:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/user'            
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body_response_error'          
    Unauthorized:
      description: Unauthorized error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body_response_error'            
    Forbidden:
      description: Forbidden error    
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body_response_error'                  
    ServerError:
      description: Server error      
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body_response_error'       
    NotFound:
      description: Not found      
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body_response_error'                          
  securitySchemes:                               
    BearerAuth:
      type: http
      scheme: bearer  
      bearerFormat: JWT